// Copyright (c) 2021 rookie-ninja
//
// Use of this source code is governed by an Apache-style
// license that can be found in the LICENSE file.

// Package rkzerometa is a middleware of go-zero framework for adding metadata in RPC response
package rkzerometa

import (
	"context"
	"github.com/rookie-ninja/rk-common/common"
	"github.com/rookie-ninja/rk-entry/entry"
	"github.com/rookie-ninja/rk-zero/interceptor"
	"github.com/rookie-ninja/rk-zero/interceptor/context"
	"github.com/tal-tech/go-zero/rest"
	"net/http"
	"time"
)

// Interceptor will add common headers as extension style in http response.
// The key is defined as bellow:
// 1: X-Request-Id: Request id generated by interceptor.
// 2: X-<Prefix-App: Application name.
// 3: X-<Prefix>-App-Version: Version of application.
// 4: X-<Prefix>-App-Unix-Time: Unix time of current application.
// 5: X-<Prefix>-Request-Received-Time: Time of current request received by application.
func Interceptor(opts ...Option) rest.Middleware {
	set := newOptionSet(opts...)

	return func(next http.HandlerFunc) http.HandlerFunc {
		return func(writer http.ResponseWriter, req *http.Request) {
			// wrap writer
			writer = rkzerointer.WrapResponseWriter(writer)

			req = req.WithContext(context.WithValue(req.Context(), rkzerointer.RpcEntryNameKey, set.EntryName))

			requestId := rkcommon.GenerateRequestId()
			writer.Header().Set(rkzeroctx.RequestIdKey, requestId)

			event := rkzeroctx.GetEvent(req)
			event.SetRequestId(requestId)
			event.SetEventId(requestId)

			writer.Header().Set(set.AppNameKey, rkentry.GlobalAppCtx.GetAppInfoEntry().AppName)
			writer.Header().Set(set.AppVersionKey, rkentry.GlobalAppCtx.GetAppInfoEntry().Version)

			now := time.Now()
			writer.Header().Set(set.AppUnixTimeKey, now.Format(time.RFC3339Nano))
			writer.Header().Set(set.ReceivedTimeKey, now.Format(time.RFC3339Nano))

			next(writer, req)
		}
	}
}
